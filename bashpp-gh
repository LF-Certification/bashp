# shellcheck shell=bash

# Script: bashpp-gh
# Downloads and extracts a package from a GitHub release and installs it to the include directory.
#
# Description:
#   This script downloads the latest release of a package from a GitHub repository,
#   extracts it, and installs the specified include file to the appropriate directory.
#   It manages caching of downloaded assets and handles .gitignore updates for the
#   installed functions.
#
# Usage:
#   ./bashpp-gh <repository> <include>
#
# Parameters:
#   repository - The GitHub repository in the format "owner/repo"
#   include    - The path to the file to include, in the format "package/function"
#
# Outputs:
#   No direct output, but creates files in the cache directory and include directory.
#   Updates .gitignore if running within a git repository.
#
# Note:
#   Requires curl to be installed.
#   Requires either GH_TOKEN or GITHUB_TOKEN environment variable for GitHub API access.
#   Will create cache directories as needed at BASHP_CACHE_DIR, XDG_CACHE_HOME/bashp or
#   ~/.cache/bashp.

declare -r INCLUDE_DIR=${INCLUDE_DIR:-${INCLUDE_DIR:-?must be set}}
declare -r repository=${1:-${repository:-?must be set}}
declare -r include=${2:-${include:-?must be set}}

command -v curl &>/dev/null || exit 1

declare -r package=${include%%/*}
declare -r cache="${BASHP_CACHE_DIR:-${XDG_CACHE_HOME:-${HOME}/.cache}/bashp}/$repository/$package"

if [[ ! -f "$cache/$include" ]]; then
  declare -r asset="bashp-$package.tar.gz"

  declare -r response
  response=$(curl -H "Authorization: Bearer ${GH_TOKEN:-${GITHUB_TOKEN}}" -sSf \
    "https://api.github.com/repos/$repository/releases/latest")

  declare -r url
  url=$(echo "$response" | grep -o '"url": *"[^"]*"' | grep "assets" | head -1 | cut -d'"' -f4)

  curl -H "Authorization: Bearer ${GH_TOKEN:-${GITHUB_TOKEN}}" \
        -H "Accept: application/octet-stream" -sSfL "$url" -o "$cache/$asset"
  tar -xzf "$cache/$asset" -C "$cache"
fi

mkdir -p "$INCLUDE_DIR/$package"
cp "$cache/$include" "$INCLUDE_DIR/$include"

if command -v git &>/dev/null && git rev-parse --is-inside-work-tree &>/dev/null; then
  declare -r function=${include##*/}
  declare -r gitignore="$INCLUDE_DIR/$package/.gitignore"
  grep -q "^$function$" "$gitignore" 2>/dev/null || echo "$function" >> "$gitignore"
fi
